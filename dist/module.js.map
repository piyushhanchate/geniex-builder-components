{"mappings":";;;;;;;;;;;;;;;;;;AECA,aAAa;;;;;AAME,kDAAqB,SAAE,KAAK,YAAE,QAAQ,EAAE;IACrD,MAAM,YAAE,QAAQ,QAAE,IAAI,cAAE,UAAU,EAAE,GAAG;IAEvC,IAAI,AAAC,CAAC,YAAY,CAAC,QAAS,YAC1B,qBAAO;kBAAG;;SACL,IAAI,CAAC,CAAC,MACX,qBACE,gBAAC,CAAA,GAAA,eAAG;QAAE,MAAM;QAAM,OAAO;YAAE,gBAAgB;QAAO;kBAC/C;;SAGA,IAAI,CAAC,CAAC,UACX,qBACE,gBAAC,CAAA,GAAA,WAAS;QACR,IAAI;QACJ,KAAK;QACL,QAAQ;QACR,QAAQ;QACR,UAAU;kBAET;;AAIT;;;;;;;ACtBO,MAAM,0DAAW,CAAA,GAAA,iBAAS,EAC/B,CAAC,OAAO;IACN,MAAM,aAAE,SAAS,YAAE,QAAQ,QAAE,IAAI,cAAE,UAAU,EAAE,GAAG,WAAW,GAAG;IAEhE,qBACE,gBAAC,CAAA,GAAA,wCAAU;QAAE,OAAO;kBAClB,cAAA,gBAAC,CAAA,GAAA,4BAAK;YAAG,GAAG,SAAS;YAAE,KAAK;sBACzB;;;AAIT;AAGF,0CAAS,WAAW,GAAG;;;;;;AClBhB,MAAM,0DAAe,CAAA,GAAA,iBAAS,EACnC,CAAC,OAAO;IACN,MAAM,aAAE,SAAS,YAAE,QAAQ,EAAE,GAAG,WAAW,GAAG;IAC9C,qBACE,iBAAC,CAAA,GAAA,iBAAS;QAAG,GAAG,SAAS;QAAE,KAAK;;YAC7B,MAAM,SAAS;YACf,MAAM,QAAQ;;;AAGrB;AAGF,0CAAa,WAAW,GAAG;;;ACjB3B,cAAc;;;;;AAOP,MAAM,0DAAU,CAAA,GAAA,iBAAS,EAC9B,CAAC,OAAO;IACN,MAAM,aAAE,SAAS,SAAE,KAAK,OAAE,GAAG,UAAE,MAAM,eAAE,WAAW,EAAE,GAAG,WAAW,GAAG;IAErE,qBACE,gBAAC,CAAA,GAAA,UAAE;QACD,UAAU;QACT,GAAG,SAAS;QACb,OAAO;QACP,QAAQ;QACR,KAAK;kBAEL,cAAA,gBAAC,CAAA,GAAA,gBAAI;YACH,KAAK;YACL,KAAI;YACJ,IAAI;YACJ,SAAS;YACT,OAAO;gBAAE,WAAW;gBAAW,GAAG,WAAW;YAAC;;;AAItD;AAGF,0CAAQ,WAAW,GAAG;;","sources":["src/index.tsx","src/components/index.tsx","src/components/utils/LinkWrapper.tsx","src/components/MyButton/index.tsx","src/components/MyTypography/index.tsx","src/components/MyImage/index.tsx"],"sourcesContent":["export * from './components'","export {default as LinkWrapper} from \"./utils/LinkWrapper\";\n\nexport { MyButton } from \"./MyButton\";\nexport {MyTypography} from \"./MyTypography\"\nexport {MyImage} from \"./MyImage\"","\n//@ts-nocheck\nimport React from \"react\";\n\nimport Link from \"next/link\";\nimport { Link as ScrollLink } from \"react-scroll\";\n\nexport default function LinkWrapper({ props, children }) {\n  const { scrollTo, link, isDisabled } = props;\n\n  if ((!scrollTo && !link) || isDisabled) {\n    return <>{children}</>;\n  } else if (!!link) {\n    return (\n      <Link href={link} style={{ textDecoration: \"none\" }}>\n        {children}\n      </Link>\n    );\n  } else if (!!scrollTo) {\n    return (\n      <ScrollLink\n        to={scrollTo}\n        spy={true}\n        smooth={true}\n        offset={-70}\n        duration={500}\n      >\n        {children}\n      </ScrollLink>\n    );\n  }\n}\n","import React from \"react\";\nimport { forwardRef, type ReactNode } from \"react\";\n// import Button, { ButtonProps } from \"@mui/material/Button\";\nimport Button from \"@mui/material/ButtonBase\";\nimport Link from \"next/link\";\nimport { Link as ScrollLink } from \"react-scroll\";\nimport { MyButtonProps } from \"./types\";\nimport LinkWrapper from \"../utils/LinkWrapper\";\n\nexport const MyButton = forwardRef<HTMLButtonElement, MyButtonProps>(\n  (props, ref) => {\n    const { textValue, scrollTo, link, isDisabled, ...restProps } = props;\n\n    return (\n      <LinkWrapper props={props}>\n        <Button {...restProps} ref={ref}>\n          {textValue}\n        </Button>\n      </LinkWrapper>\n    );\n  }\n);\n\nMyButton.displayName = \"MyButton\";\n","import React from 'react'\nimport { forwardRef, type ReactNode } from \"react\";\nimport { Typography, TypographyProps } from \"@mui/material\";\nimport { MyTypographyProps } from \"./types\";\n\nexport const MyTypography = forwardRef<HTMLParagraphElement, MyTypographyProps>(\n  (props, ref) => {\n    const { textValue, children, ...restProps } = props;\n    return (\n      <Typography {...restProps} ref={ref}>\n        {props.textValue}\n        {props.children}\n      </Typography>\n    );\n  }\n);\n\nMyTypography.displayName = \"MyTypography\";\n","// @ts-nocheck\nimport React from 'react'\nimport { forwardRef, type ReactNode } from \"react\";\nimport { Box } from \"@mui/material\";\nimport Image from \"next/image\";\nimport { MyImageProps } from \"./types\";\n\nexport const MyImage = forwardRef<HTMLDivElement, MyImageProps>(\n  (props, ref) => {\n    const { objectFit, width, src, height, imageStyles, ...restProps } = props;\n\n    return (\n      <Box\n        position={\"relative\"}\n        {...restProps}\n        width={width}\n        height={height}\n        ref={ref}\n      >\n        <Image\n          src={src}\n          alt=\"image\"\n          fill\n          quality={100}\n          style={{ objectFit: objectFit, ...imageStyles }}\n        />\n      </Box>\n    );\n  }\n);\n\nMyImage.displayName = \"MyImage\";\n"],"names":[],"version":3,"file":"module.js.map"}